
 String rfurlpath = "http://cdn.banmi.com/banmiapp/apk/";
    @GET("banmi_330.apk")
    Observable<ResponseBody>getRfData();
==============
public class DownloadFragment extends Fragment implements View.OnClickListener {


    private Button btn;
    private SeekBar bar;
    private File sd;
    private String mPath;//安装包

    public DownloadFragment() {
        // Required empty public constructor
    }


    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        View inflate = inflater.inflate(R.layout.fragment_download, container, false);
        initView(inflate);
        downApk();
        return inflate;
    }

    private void initView(View inflate) {
        btn = (Button) inflate.findViewById(R.id.btn);
        bar = (SeekBar) inflate.findViewById(R.id.bar);
        btn.setOnClickListener(this);
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.btn:
                rfdown(sd+"/"+"sss.apk");
                break;
        }
    }
    private void rfdown(final String s) {
        Retrofit rf = new Retrofit.Builder()
                .addCallAdapterFactory(RxJava2CallAdapterFactory.create())
                .addConverterFactory(GsonConverterFactory.create())
                .baseUrl(MyServer.doenpath)
                .build();

        rf.create(MyServer.class).download()
                .subscribeOn(Schedulers.io())
                .subscribe(new Observer<ResponseBody>() {
                    @Override
                    public void onSubscribe(Disposable d) {
                    }
                    @Override
                    public void onNext(ResponseBody responseBody) {
                        long max = responseBody.contentLength();

                        InputStream inputStream = responseBody.byteStream();

                        savePath(inputStream,s,max);
                    }

                    @Override
                    public void onError(Throwable e) {
                        Toast.makeText(getActivity(), ""+e.getMessage(), Toast.LENGTH_SHORT).show();
                    }

                    @Override
                    public void onComplete() {

                    }
                });


    }
//文件下载保存
    private void savePath(InputStream inputStream, final String s, long max) {

        try {
            FileOutputStream fos = new FileOutputStream(new File(s));

            long count = 0;

            int length = -1;

            byte[] bys = new byte[1024 * 10];

            while((length = inputStream.read(bys))!=-1){

                fos.write(bys,0,length);
                count +=length;
                Log.i("tag", "count: "+count+",max:"+max);
                //进度条和视频播放SurfaceView可以直接在子线程中刷新
                bar.setMax((int)max);
                bar.setProgress((int)count);
            }
            //关流
            inputStream.close();
            fos.close();
            
            //在主线程中
            getActivity().runOnUiThread(new Runnable() {
                @Override
                public void run() {
                    Toast.makeText(getContext(), "下载完毕", Toast.LENGTH_SHORT).show();
                    mPath = s;
                    
                    //安装处理
                    InstallUtil.installApk(getActivity(),s);
                }
            });
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }

    }

    private void downApk() {
        if (ContextCompat.checkSelfPermission(getActivity(), Manifest.permission.READ_EXTERNAL_STORAGE)
                == PackageManager.PERMISSION_GRANTED){
            readSd();
        }else{
            ActivityCompat.requestPermissions(getActivity(),new String[]{Manifest.permission.READ_EXTERNAL_STORAGE},200);
        }
    }
    //重写方法
    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        if (requestCode == 200 && grantResults.length>0 && grantResults[0]==PackageManager.PERMISSION_GRANTED){
                readSd();
        }else{
            Toast.makeText(getActivity(), "错误", Toast.LENGTH_SHORT).show();
        }
    }
    private void readSd() {
        if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)){
            sd = Environment.getExternalStorageDirectory();
        }
    }
    
     //android8.0安装处理
    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode== RESULT_OK && InstallUtil.UNKNOWN_CODE == resultCode){
            InstallUtil.installApk(getActivity(), mPath);
            //再次执行安装流程，包含权限判等
        }
    }
}
