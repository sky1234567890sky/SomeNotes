package com.example.day16_sqlite;

import java.util.ArrayList;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;

public class NyDv extends SQLiteOpenHelper{

	private SQLiteDatabase mydb;// null

	public NyDv(Context context, String name, CursorFactory factory, int version) {
		super(context, name, factory, version);
		if(mydb==null){
			mydb = getWritableDatabase();
		}
	}

	@Override
	public void onCreate(SQLiteDatabase db) {
		
		//创表   初始化 数据    只在第一次  创建 NyDv 对象  并且 获得  读写权限  之后    执行     以后再也不执行
		String sql = "create table user(id integer primary key autoincrement,name text)";
		db.execSQL(sql);
		
		//初始化数据
		for (int i = 0; i < 30; i++) {
			ContentValues values = new ContentValues();
			//db.execSQL(sql);
			// values 其实就是一个 map   键是 列名 
			values.put("name", "测试"+i);
			//         表名          null   插入的数据
			db.insert("user", null, values );
			
		}
		//db.close();
		
	}

	@Override
	public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
		// TODO Auto-generated method stub
		
	}
	
	//增 
	public void inserUser(User u){
		ContentValues values = new ContentValues();
		//db.execSQL(sql);
		// values 其实就是一个 map   键是 列名 
		values.put("name", u.getName());
		//         表名          null   插入的数据
		mydb.insert("user", null, values );
		mydb.close();	
	}
	//删
	public void deleteUser(User u){
		
		mydb.delete("user", "id=?", new String[]{u.getId()+""});
		mydb.close();
	}
	//改
	public void upUser(User newUser, User oldUser){
		
		ContentValues values = new ContentValues();
		values.put("name", newUser.getName());
		
		mydb.update("user", values , "id=?", new String[]{oldUser.getId()+""});
		
		mydb.close();
	}
	//查 所有
	public ArrayList<User> getUserAll(){
		ArrayList<User> list = new ArrayList<User>();
		
		Cursor query = mydb.query("user", null, null, null, null, null, null);
		while(query.moveToNext()){
			int id = query.getInt(query.getColumnIndex("id"));
			String name = query.getString(query.getColumnIndex("name"));
			list.add(new User(name, id));
		}
		
		return list;
	}
	//查   以name  为条件 查询
	public ArrayList<User> getUserName(User u){
		ArrayList<User> list = new ArrayList<User>();
		Cursor query = mydb.query("user", null, "name=?", new String[]{u.getName()}, null, null, null);
		while(query.moveToNext()){
			int id = query.getInt(query.getColumnIndex("id"));
			String name = query.getString(query.getColumnIndex("name"));
			list.add(new User(name, id));
		}
		return list;
	}
}







