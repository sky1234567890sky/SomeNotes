Android中级-第13天-广播+项目模块3:主界面项目Fragment（6课时）
	01-广播的简介，02-广播的机制，03-广播的场景，04-广播的类型，05-BroadCastReceiver的注册方式和区别，06-广播的发送方式（无序广播）
		
	02-广播的机制
		
	03-广播的场景
		
	04-广播的类型（有序广播、无序广播）
		广播有两个角色，一个是广播发送者，另外一个是广播接收者
		广播按照类型分为两种，一种是全局广播，另外一种是本地广播
		按照广播机制也可以分为两种，标准广播和有序广播
		自定义广播   系统广播
		
	05-BroadCastReceiver的注册方式和区别（常驻和非常驻），08-广播的注意事项，java代码注册广播
		常驻 静态注册  清单注册
			    <!--
					android:enabled="true" 代表是否启用这个广播接收器					
					aandroid:exported：决定此broadcastReceiver能否接收其他应用发送的广播，
					该属性默认值由receiver是否设置<intent-filter>有关，当设置了<intent-filter>时，
					该属性的默认值为true，否则为false
				-->

        <receiver
            android:name=".MyReceiver"
            android:enabled="true"
            android:exported="true"></receiver>
			
		非常住  动态注册  java代码注册
			//java代码动态注册广播
			IntentFilter intentFilter = new IntentFilter();
			intentFilter.addAction("ceshi");
			intentFilter.setPriority(1000);//优先级
			MyReceiver2 myReceiver2 = new MyReceiver2();
			registerReceiver(myReceiver2,intentFilter);
		
	06-广播的发送方式（发有序广播，发无序广播）
		自定义广播：
			有序广播：
				按照优先级，一级一级的向下传递，接收者可以修改广播数据，也可以终止广播事件
				
				优先度的大小设置范围为-1000~1000
				想要截断广播，只需要在onreceive()方法中调用aboryBroadcast()即可是广播不再传递下去
				
				sendOrderedBroadcast(intent,null);//发送有序广播
					
			无序广播：
				所有的接收者都会接收事件，不可以被拦截，不可以被修改
				//发送无序广播
					Intent intent = new Intent();
					intent.putExtra("tag","发送无序广播 静态注册");
					intent.setAction("ceshi");
					sendBroadcast(intent);

			
	
	07-本地广播，粘性广播
	
	08-广播的注意事项
	
	09-案例:接收系统广播（网络，开机，电量）;接收自定义广播
	
		//开机广播清单注册
		
		     <!--
				开机广播权限
				
			-->
			<uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED"/>
		
			<!--静态注册-->
        <receiver android:name=".BootReceiver">
            <!-- intent-filter 意图过滤器,通过它来区分你要就收的广播-->
            <intent-filter>
                <!--开机广播的action-->
                <action android:name="android.intent.action.BOOT_COMPLETED"/>
            </intent-filter>
        </receiver>
		
			 Log.d(TAG, "onReceive: 手机开机了");
			Intent in = new Intent(context,MainActivity.class);
			//不行,如果不加这个flag,是无法启动acitivyt的,
			//以前在一个Activity中启动另外一个,是有默认的任务栈的,新启动的Activiyt直接往
			//任务栈中添加,现在在receiver中没有,需要添加一个新的任务栈
			in.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
			context.startActivity(in);
			
	网络广播
			intentFilter.addAction("android.net.conn.CONNECTIVITY_CHANGE");
			注意：清单文件注册不能适配android7.0及以上(targetSdkVersion ≥ N,清单文件注册失效
			
			动态注册
			
			int netWorkStates = NetworkUtil.getNetWorkStates(context);
        
			switch (netWorkStates) {
				case NetworkUtil.TYPE_NONE:
					//断网了
					break;
				case NetworkUtil.TYPE_MOBILE:
					//打开了移动网络
					break;
				case NetworkUtil.TYPE_WIFI:
					//打开了WIFI
					break;
	 
				default:
					break;
			}
			
		电池电量广播注册：
					// 注册广播接受者java代码
					IntentFilter intentFilter = new IntentFilter(
							Intent.ACTION_BATTERY_CHANGED);
					batteryReceiver = new BatteryReceiver();
					// 注册receiver
					registerReceiver(batteryReceiver, intentFilter);
					
					
					if (Intent.ACTION_BATTERY_CHANGED.equals(intent.getAction())) {
						int level = intent.getIntExtra("level", 0);
						Log.i("tag","电池电量为" + level + "%");
						if (level < 15) {
							Log.i("tag","===> 电池电量不足15%，请及时充电");
						}
					}
					

		电池信息:
			// 电池状态 import static android.os.BatteryManager.EXTRA_STATUS; 
			// 未知 import static android.os.BatteryManager.BATTERY_STATUS_UNKNOWN; 
			// 充电中 import static android.os.BatteryManager.BATTERY_STATUS_CHARGING; 
			// 放电中 import static android.os.BatteryManager.BATTERY_STATUS_DISCHARGING; 
			// 未充电 import static android.os.BatteryManager.BATTERY_STATUS_NOT_CHARGING; 
			// 电池满 import static android.os.BatteryManager.BATTERY_STATUS_FULL; 
			// 电池健康情况 import static android.os.BatteryManager.EXTRA_HEALTH; 
			// 未知 import static android.os.BatteryManager.BATTERY_HEALTH_UNKNOWN; 
			// 良好 import static android.os.BatteryManager.BATTERY_HEALTH_GOOD; 
			// 过热 import static android.os.BatteryManager.BATTERY_HEALTH_OVERHEAT; 
			// 没电 import static android.os.BatteryManager.BATTERY_HEALTH_DEAD; 
			// 未知错误 import static android.os.BatteryManager.BATTERY_HEALTH_UNSPECIFIED_FAILURE; 
			// 过电压 import static android.os.BatteryManager.BATTERY_HEALTH_OVER_VOLTAGE; 
			// 温度过低 import static android.os.BatteryManager.BATTERY_HEALTH_COLD; 
			// 充电类型 import static android.os.BatteryManager.EXTRA_PLUGGED; 
			// 充电器 import static android.os.BatteryManager.BATTERY_PLUGGED_AC; 
			// 其他 import static android.os.BatteryManager.BATTERY_PLUGGED_ANY; 
			// USB import static android.os.BatteryManager.BATTERY_PLUGGED_USB; 
			// 无线充电 import static android.os.BatteryManager.BATTERY_PLUGGED_WIRELESS; 
			// 当前电量 import static android.os.BatteryManager.EXTRA_LEVEL; 
			// 当前电池温度 import static android.os.BatteryManager.EXTRA_TEMPERATURE; 
							import static android.os.BatteryManager.EXTRA_SCALE; 
			// 当前电池电压 import static android.os.BatteryManager.EXTRA_VOLTAGE; 
			// 电池技术描述 import static android.os.BatteryManager.EXTRA_TECHNOLOGY; 
			// 最大充电电压 import static android.os.BatteryManager.EXTRA_MAX_CHARGING_VOLTAGE; 
			// 最大充电电流 import static android.os.BatteryManager.EXTRA_MAX_CHARGING_CURRENT;

	10-主界面 项目 Fragment完成